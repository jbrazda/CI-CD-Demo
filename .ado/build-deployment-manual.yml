# IICS Build Deployment Pipeline
name: Build Deploy
trigger:
  none

parameters:
  # Defines Package Configuration for the release, 
  # you can override it using differnt ocnfig file or update the corresponding config file via commit
  - name: package_config
    displayName: Package Configuration
    type: string
    default: './conf/all_exclude_connections.package.txt'
  # Override for Publish Configuration
  - name: publish_config
    displayName: Publish Configuration
    type: string
    default: './conf/all_designs.publish.txt'
  - name: deploy_dev
    displayName: 'Deploy to Dev'
    type: boolean
    default: false
  - name: deploy_test
    displayName: 'Deploy to Test'
    type: boolean
    default: true
  - name: deploy_prod
    displayName: 'Deploy to Prod'
    type: boolean
    default: true

variables:
  - group: "IICS-CICD-RELEASE"
  - name: package_config
    value: ${{ parameters.package_config }} 
  - name: publish_config
    value: ${{ parameters.publish_config }} 
  - name: deploy_dev
    value: ${{ parameters.deploy_dev }} 
  - name: deploy_test
    value: ${{ parameters.deploy_test }} 
  - name: deploy_prod
    value: ${{ parameters.deploy_prod }} 

pool:
  vmImage: 'ubuntu-latest'
  demands: 
  - java

stages:
  - stage: Build
    jobs:
      - job: Build 
        steps:
        - checkout: self
          persistCredentials: true
        - script: |
            echo Build.SourceBranch:        $(Build.SourceBranch)
            echo Build.RequestedFor:        $(Build.RequestedFor)
            echo Build.RequestedForEmail:   $(Build.RequestedForEmail)
            echo IICS_USER_DEV:             $(IICS_USER_DEV)
            echo IICS_USER_TEST:            $(IICS_USER_TEST)
            echo IICS_USER_PROD:            $(IICS_USER_PROD)
            echo ===========================================
            echo ENV Variables
            echo ===========================================
            set
          displayName: 'Print Environment Info'
        - task: Ant@1
          displayName: 'Package Assets'
          inputs:
            options: >- 
              -Diics.release=./conf/iics.release.properties 
              -Diics.target.environment=dev 
              -Diics.target.package.config=$(package_config)
              -Dtools.reporting.disabled=true 
              -Dtools.transform.disabled=true 
            targets: 'package.src'
            buildFile: 'build.xml'
            publishJUnitResults: false

        - task: CopyFiles@2
          displayName: 'Copy Build Artifacts to Staging'
          inputs:
            sourceFolder: '$(Build.SourcesDirectory)/target/iics'
            contents: '**/?(*.zip)'
            targetFolder: '$(Build.ArtifactStagingDirectory)'
            OverWrite: true

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Pipeline Artifacts'
          inputs:
            pathToPublish: '$(Build.ArtifactStagingDirectory)'
            artifactType: 'Container'
            artifactName: 'IICSPackages'

  - stage: Deploy_Dev
    dependsOn:
      - Build
    condition: and(succeeded('Build'),eq(variables.deploy_dev, true))
    jobs:
    - deployment:
      displayName: 'Deploy Dev'
      environment: DEV 
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
                persistCredentials: true
              - script: |
                  echo Build.SourceBranch:        $(Build.SourceBranch)
                  echo Build.RequestedFor:        $(Build.RequestedFor)
                  echo Build.RequestedForEmail:   $(Build.RequestedForEmail)
                  echo IICS_USER:                 $(IICS_USER_DEV)
                  echo ===========================================
                  echo ENV Variables
                  echo ===========================================
                  set
                displayName: 'Print Environment Info'
              - task: Ant@1
                displayName: 'Export Org Assets as a Backup'
                inputs:
                  options: >-
                    -Diics.user.dev=$(IICS_USER_DEV) 
                    -Diics.password.dev=$(IICS_PWD_DEV) 
                    -Diics.release=./conf/iics.release.properties 
                    -Diics.source.environment=dev 
                    -Diics.export.list.location=./conf/export_list.txt 
                    -Dtools.reporting.disabled=true 
                    -Dtools.transform.disabled=true 
                  targets: 'download.src'
                  buildFile: 'build.xml'
                  publishJUnitResults: false
              - task: CopyFiles@2
                displayName: 'Copy Backup to Staging'
                inputs:
                  sourceFolder: '$(Build.SourcesDirectory)/target/iics'
                  contents: '**/?(*.zip)'
                  targetFolder: '$(Build.ArtifactStagingDirectory)'
                  OverWrite: true
              
              - task: PublishBuildArtifacts@1
                displayName: 'Publish Backup'
                inputs:
                  pathToPublish: '$(Build.ArtifactStagingDirectory)'
                  artifactType: 'Container'
                  artifactName: 'Backups'

              - task: CopyFiles@2
                displayName: 'Copy Build Artifacts to target'
                inputs:
                  sourceFolder: '$(Pipeline.Workspace)/IICSPackages'
                  contents: '**/?(*.zip)'
                  targetFolder: '$(Build.SourcesDirectory)/target/iics'
                  OverWrite: true

              - script: |
                  echo "BACKUP COMPLETED"
                  ls -la $(Pipeline.Workspace)/IICSPackages/import/dev
                  ls -la target/iics/import/dev
                displayName: 'Backup Completed'

              - task: Ant@1
                displayName: 'Import Assets'
                inputs:
                  options: >- 
                    -Diics.user.dev=$(IICS_USER_DEV) 
                    -Diics.password.dev=$(IICS_PWD_DEV) 
                    -Diics.release=./conf/iics.release.properties 
                    -Diics.target.environment=dev 
                    -Diics.target.package.config=$(package_config)
                    -Dtools.reporting.disabled=true 
                    -Dtools.transform.disabled=true 
                  targets: 'import'
                  buildFile: 'build.xml'
                  publishJUnitResults: false
              
              - task: Ant@1
                displayName: 'Publish Assets'
                # condition: eq(variables.publishAllComponents, true)
                inputs:
                  options: >- 
                    -Diics.user.dev=$(IICS_USER_DEV) 
                    -Diics.password.dev=$(IICS_PWD_DEV) 
                    -Diics.release=./conf/iics.release.properties 
                    -Diics.target.environment=dev 
                    -Diics.target.publish.config=$(publish_config))
                  targets: 'publish'
                  buildFile: 'build.xml'
                  publishJUnitResults: false
  - stage: Deploy_Test
    dependsOn:
      - Build
    condition: and(succeeded('Build'),eq(variables.deploy_test, true))
    jobs:
    - deployment:
      displayName: 'Deploy Test'
      environment: TEST 
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
                persistCredentials: true
              - script: |
                  echo Build.SourceBranch:        $(Build.SourceBranch)
                  echo Build.RequestedFor:        $(Build.RequestedFor)
                  echo Build.RequestedForEmail:   $(Build.RequestedForEmail)
                  echo IICS_USER:                 $(IICS_USER_TEST)
                  echo ===========================================
                  echo ENV Variables
                  echo ===========================================
                  set
                displayName: 'Print Environment Info'
              - task: Ant@1
                displayName: 'Export Org Assets as a Backup'
                inputs:
                  options: >-
                    -Diics.user.test=$(IICS_USER_TEST) 
                    -Diics.password.test=$(IICS_PWD_TEST) 
                    -Diics.release=./conf/iics.release.properties 
                    -Diics.source.environment=test 
                    -Diics.export.list.location=./conf/export_list.txt 
                    -Dtools.reporting.disabled=true 
                    -Dtools.transform.disabled=true 
                  targets: 'download.src'
                  buildFile: 'build.xml'
                  publishJUnitResults: false
              - task: CopyFiles@2
                displayName: 'Copy Backup to Staging'
                inputs:
                  sourceFolder: '$(Build.SourcesDirectory)/target/iics'
                  contents: '**/?(*.zip)'
                  targetFolder: '$(Build.ArtifactStagingDirectory)'
                  OverWrite: true
              
              - task: PublishBuildArtifacts@1
                displayName: 'Publish Backup'
                inputs:
                  pathToPublish: '$(Build.ArtifactStagingDirectory)'
                  artifactType: 'Container'
                  artifactName: 'Backups'

              - task: CopyFiles@2
                displayName: 'Copy Build Artifacts to target'
                inputs:
                  sourceFolder: '$(Pipeline.Workspace)/IICSPackages/import/dev'
                  contents: '**/?(*.zip)'
                  targetFolder: '$(Build.SourcesDirectory)/target/iics/import/test'
                  OverWrite: true

              - script: |
                  echo "BACKUP COMPLETED"
                  ls -la $(Pipeline.Workspace)/IICSPackages/import/test
                  ls -la target/iics/import/test
                displayName: 'Backup Completed'

              - task: Ant@1
                displayName: 'Import Assets'
                inputs:
                  options: >- 
                    -Diics.user.test=$(IICS_USER_TEST) 
                    -Diics.password.test=$(IICS_PWD_TEST) 
                    -Diics.release=./conf/iics.release.properties 
                    -Diics.target.environment=test 
                    -Diics.target.package.config=$(package_config)
                    -Dtools.reporting.disabled=true 
                    -Dtools.transform.disabled=true 
                  targets: 'import'
                  buildFile: 'build.xml'
                  publishJUnitResults: false
              
              - task: Ant@1
                displayName: 'Publish Assets'
                inputs:
                  options: >- 
                    -Diics.user.test=$(IICS_USER_TEST) 
                    -Diics.password.test=$(IICS_PWD_TEST) 
                    -Diics.release=./conf/iics.release.properties 
                    -Diics.target.environment=test 
                    -Diics.target.publish.config=$(publish_config))
                  targets: 'publish'
                  buildFile: 'build.xml'
                  publishJUnitResults: false

  - stage: Deploy_PROD
    dependsOn:
      - Build
      - Deploy_TEST
    condition: and(succeeded('Build'),succeeded('Deploy_TEST'),eq(variables.deploy_prod, true))
    jobs:
    - deployment:
      displayName: 'Deploy PROD'
      environment: PROD
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
                persistCredentials: true
              - script: |
                  echo Build.SourceBranch:        $(Build.SourceBranch)
                  echo Build.RequestedFor:        $(Build.RequestedFor)
                  echo Build.RequestedForEmail:   $(Build.RequestedForEmail)
                  echo IICS_USER:                 $(IICS_USER_PROD)
                  echo ===========================================
                  echo ENV Variables
                  echo ===========================================
                  set
                displayName: 'Print Environment Info'
              - task: Ant@1
                displayName: 'Export PROD Org Assets as a Backup'
                inputs:
                  options: >-
                    -Diics.user.prod=$(IICS_USER_PROD) 
                    -Diics.password.prod=$(IICS_PWD_PROD) 
                    -Diics.release=./conf/iics.release.properties 
                    -Diics.source.environment=prod 
                    -Diics.export.list.location=./conf/export_list.txt 
                    -Dtools.reporting.disabled=true 
                    -Dtools.transform.disabled=true 
                  targets: 'download.src'
                  buildFile: 'build.xml'
                  publishJUnitResults: false
              - task: CopyFiles@2
                displayName: 'Copy Backup to Staging'
                inputs:
                  sourceFolder: '$(Build.SourcesDirectory)/target/iics'
                  contents: '**/?(*.zip)'
                  targetFolder: '$(Build.ArtifactStagingDirectory)'
                  OverWrite: true

              - task: PublishBuildArtifacts@1
                displayName: 'Publish Backup'
                inputs:
                  pathToPublish: '$(Build.ArtifactStagingDirectory)'
                  artifactType: 'Container'
                  artifactName: 'Backups'
              
              - task: CopyFiles@2
                displayName: 'Copy Build Artifacts to target'
                inputs: # need to copy Files to prod $(Build.SourcesDirectory)/target/iics/import/prod
                  sourceFolder: '$(Pipeline.Workspace)/IICSPackages/import/dev'
                  contents: '**/?(*.zip)'
                  targetFolder: '$(Build.SourcesDirectory)/target/iics/import/prod'
                  OverWrite: true

              - script: |
                  echo "PROD BACKUP COMPLETED"
                  ls -la $(Pipeline.Workspace)/IICSPackages/import/prod
                  ls -la target/iics/import/prod
                displayName: 'PROD Backup Completed'
              
              - task: Ant@1
                displayName: 'Import Assets'
                inputs:
                  options: >- 
                    -Diics.user.prod=$(IICS_USER_PROD) 
                    -Diics.password.prod=$(IICS_PWD_PROD) 
                    -Diics.release=./conf/iics.release.properties 
                    -Diics.target.environment=prod 
                    -Diics.target.package.config=$(package_config)
                    -Dtools.reporting.disabled=true 
                    -Dtools.transform.disabled=true 
                  targets: 'import'
                  buildFile: 'build.xml'
                  publishJUnitResults: false
              
              - task: Ant@1
                displayName: 'Publish Assets'
                inputs:
                  options: >- 
                    -Diics.user.prod=$(IICS_USER_PROD) 
                    -Diics.password.prod=$(IICS_PWD_PROD) 
                    -Diics.release=./conf/iics.release.properties 
                    -Diics.target.environment=prod 
                    -Diics.target.publish.config=$(publish_config))
                  targets: 'publish'
                  buildFile: 'build.xml'
                  publishJUnitResults: false