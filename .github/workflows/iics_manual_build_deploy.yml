# This is a basic workflow that is manually triggered

name: Manual Deployment
env: 
  IICS_BACKUP_PACKAGE: 'CI-CD-Demo.zip'

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
# Following Project Secrets must be defined in the CI/CD Configuration
# IICS_ORG_USER_DEV: ""
# IICS_ORG_PWD_DEV: ""
# IICS_ORG_USER_TEST: ""
# IICS_ORG_PWD_TEST: ""
# IICS_ORG_USER_PROD: ""
# IICS_ORG_PWD_PROD: ""


on:
  workflow_dispatch:
    # Inputs the workflow accepts. use ${{ github.event.inputs.input_name }}
    inputs:
      package_config:
        # Override Custom Configuration
        description: 'Package Configuration'
        # Default value if no value is explicitly provided
        default: './conf/all_exclude_connections.package.txt'
        # Input has to be provided for the workflow to run
        required: true
      publish_config:
        # Override Custom Configuration
        description: 'Publish Configuration'
        # Default value if no value is explicitly provided
        default: './conf/all_designs.publish.txt'
        # Input has to be provided for the workflow to run
        required: true
      deploy_to_dev:
        # Controls if to ddploy this build to Dev Environment
        description: 'Deploy to Dev'
        # Default value if no value is explicitly provided
        default: false
        type: boolean
        # Input has to be provided for the workflow to run
        required: false
      deploy_to_test:
        # Controls if to ddploy this build to Dev Environment
        description: 'Deploy to Test'
        # Default value if no value is explicitly provided
        default: true
        type: boolean
        # Input has to be provided for the workflow to run
        required: false
      deploy_to_prod:
        # Controls if to ddploy this build to Dev Environment
        description: 'Deploy to Prod'
        # Default value if no value is explicitly provided
        default: true
        type: boolean
        # Input has to be provided for the workflow to run
        required: false
      
jobs:
  build_all:
    runs-on: ubuntu-latest
    name: Build Deployment Packages
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 1.8
      uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 11
    - name: Package Dev # Package DEV Package
      run: |
        ant package.src \
        -Diics.release=./conf/iics.release.properties \
        -Diics.target.environment=dev \
        -Diics.target.package.config=${{ github.event.inputs.package_config }} \
        -Dtools.reporting.disabled=true \
        -Dtools.transform.disabled=true
    - name: Package Test # Package TEST Package
      run: |
        ant package.src \
        -Diics.release=./conf/iics.release.properties \
        -Diics.target.environment=test \
        -Diics.target.package.config=${{ github.event.inputs.package_config }} \
        -Dtools.reporting.disabled=true \
        -Dtools.transform.disabled=true
    - name: Package Prod # Package PROD Package
      run: |
        ant package.src \
        -Diics.release=./conf/iics.release.properties \
        -Diics.target.environment=prod \
        -Diics.target.package.config=${{ github.event.inputs.package_config }} \
        -Dtools.reporting.disabled=true \
        -Dtools.transform.disabled=true
    - name: Archive Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build_packages
        path: target/iics
        if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`
## DEPLOY Jobs
  deploy_dev:
    runs-on: ubuntu-latest
    environment: dev
    env:
      IICS_USER_NAME: ${{ vars.IICS_ORG_USER_DEV }}
      IICS_USER_PWD: ${{ secrets.IICS_ORG_PWD_DEV }}
      IICS_TARGET_ENVIRONMENT: dev
    if: ${{ github.event.inputs.deploy_to_dev == 'true' }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 1.8
      uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 11
    - name: Backup Assets From Target Org
      run: |
        ant download.src \
        -Diics.user.${{ env.IICS_TARGET_ENVIRONMENT }}="${{ env.IICS_USER_NAME }}" \
        -Diics.password.${{ env.IICS_TARGET_ENVIRONMENT }}="${{ env.IICS_USER_PWD }}" \
        -Diics.release=./conf/iics.release.properties \
        -Diics.export.list.location=./conf/export_list.txt \
        -Diics.source.environment=${{ env.IICS_TARGET_ENVIRONMENT }} \
        -Dtools.reporting.disabled=true
    - name: Archive Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: backup_dev
        path: target/iics/export/${{ env.IICS_TARGET_ENVIRONMENT }}/${{ env.IICS_BACKUP_PACKAGE }}
        if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`
    - name: Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: build_packages
        path: target/iics
    - name: Import Assets
      run: |
        ant import \
        -Diics.user.${{ env.IICS_TARGET_ENVIRONMENT }}="${{ env.IICS_USER_NAME }}" \
        -Diics.password.${{ env.IICS_TARGET_ENVIRONMENT }}="${{ env.IICS_USER_PWD }}" \
        -Diics.release=./conf/iics.release.properties \
        -Diics.target.environment=${{ env.IICS_TARGET_ENVIRONMENT }} \
        -Dtools.reporting.disabled=true \
        -Dtools.transform.disabled=true
    - name: Publish Assets
      run: |
        ant publish \
        -Diics.user.${{ env.IICS_TARGET_ENVIRONMENT }}="${{ env.IICS_USER_NAME }}" \
        -Diics.password.${{ env.IICS_TARGET_ENVIRONMENT }}="${{ env.IICS_USER_PWD }}" \
        -Diics.release=./conf/iics.release.properties \
        -Diics.target.environment=${{ env.IICS_TARGET_ENVIRONMENT }} \
        -Diics.target.publish.config=${{ github.event.inputs.publish_config }} \
        -Dtools.reporting.disabled=true \
        -Dtools.transform.disabled=true
  deploy_test:
    runs-on: ubuntu-latest
    environment: test
    env:
      IICS_USER_NAME: ${{ vars.IICS_ORG_USER_TEST }}
      IICS_USER_PWD: ${{ secrets.IICS_ORG_PWD_TEST }}
      IICS_TARGET_ENVIRONMENT: test
    if: ${{ github.event.inputs.deploy_to_test == 'true' }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 1.8
      uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 11
    - name: Backup Assets From Target Org
      run: |
        ant download.src \
        -Diics.user.${{ env.IICS_TARGET_ENVIRONMENT }}="${{ env.IICS_USER_NAME }}" \
        -Diics.password.${{ env.IICS_TARGET_ENVIRONMENT }}="${{ env.IICS_USER_PWD }}" \
        -Diics.release=./conf/iics.release.properties \
        -Diics.export.list.location=./conf/export_list.txt \
        -Diics.source.environment=${{ env.IICS_TARGET_ENVIRONMENT }} \
        -Dtools.reporting.disabled=true
    - name: Archive Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: backup_test
        path: target/iics/export/${{ env.IICS_TARGET_ENVIRONMENT }}/${{ env.IICS_BACKUP_PACKAGE }}
        if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`
    - name: Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: build_packages
        path: target/iics
    - name: Import Assets
      run: |
        ant import \
        -Diics.user.${{ env.IICS_TARGET_ENVIRONMENT }}="${{ env.IICS_USER_NAME }}" \
        -Diics.password.${{ env.IICS_TARGET_ENVIRONMENT }}="${{ env.IICS_USER_PWD }}" \
        -Diics.release=./conf/iics.release.properties \
        -Diics.target.environment=${{ env.IICS_TARGET_ENVIRONMENT }} \
        -Dtools.reporting.disabled=true \
        -Dtools.transform.disabled=true
    - name: Publish Assets
      run: |
        ant publish \
        -Diics.user.${{ env.IICS_TARGET_ENVIRONMENT }}="${{ env.IICS_USER_NAME }}" \
        -Diics.password.${{ env.IICS_TARGET_ENVIRONMENT }}="${{ env.IICS_USER_PWD }}" \
        -Diics.release=./conf/iics.release.properties \
        -Diics.target.environment=${{ env.IICS_TARGET_ENVIRONMENT }} \
        -Diics.target.publish.config=${{ github.event.inputs.publish_config }} \
        -Dtools.reporting.disabled=true \
        -Dtools.transform.disabled=true

  deploy_prod:
    runs-on: ubuntu-latest
    environment: prod
    env:
      IICS_USER_NAME: ${{ vars.IICS_ORG_USER_PROD }}
      IICS_USER_PWD: ${{ secrets.IICS_ORG_PWD_PROD }}
      IICS_TARGET_ENVIRONMENT: prod
    if: ${{ github.event.inputs.deploy_to_prod == 'true' }} 
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 1.8
      uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 11
    - name: Backup Assets From Target Org
      run: |
        ant download.src \
        -Diics.user.${{ env.IICS_TARGET_ENVIRONMENT }}="${{ env.IICS_USER_NAME }}" \
        -Diics.password.${{ env.IICS_TARGET_ENVIRONMENT }}="${{ env.IICS_USER_PWD }}" \
        -Diics.release=./conf/iics.release.properties \
        -Diics.export.list.location=./conf/export_list.txt \
        -Diics.source.environment=${{ env.IICS_TARGET_ENVIRONMENT }} \
        -Dtools.reporting.disabled=true
    - name: Archive Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: backup_prod
        path: target/iics/export/${{ env.IICS_TARGET_ENVIRONMENT }}/${{ env.IICS_BACKUP_PACKAGE }}
        if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`
    - name: Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: build_packages
        path: target/iics
    - name: Import Assets
      run: |
        ant import \
        -Diics.user.${{ env.IICS_TARGET_ENVIRONMENT }}="${{ env.IICS_USER_NAME }}" \
        -Diics.password.${{ env.IICS_TARGET_ENVIRONMENT }}="${{ env.IICS_USER_PWD }}" \
        -Diics.release=./conf/iics.release.properties \
        -Diics.target.environment=${{ env.IICS_TARGET_ENVIRONMENT }} \
        -Dtools.reporting.disabled=true \
        -Dtools.transform.disabled=true
    - name: Publish Assets
      run: |
        ant publish \
        -Diics.user.${{ env.IICS_TARGET_ENVIRONMENT }}="${{ env.IICS_USER_NAME }}" \
        -Diics.password.${{ env.IICS_TARGET_ENVIRONMENT }}="${{ env.IICS_USER_PWD }}" \
        -Diics.release=./conf/iics.release.properties \
        -Diics.target.environment=${{ env.IICS_TARGET_ENVIRONMENT }} \
        -Diics.target.publish.config=${{ github.event.inputs.publish_config }} \
        -Dtools.reporting.disabled=true \
        -Dtools.transform.disabled=true